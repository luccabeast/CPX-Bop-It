const uint8_t spRIGHT[] PROGMEM = {0x66,0xD7,0xB1,0x24,0xDC,0xE3,0x98,0xCD,0x95,0xA4,0x28,0xB5,0x97,0xD6,0xD0,0x8C,0x3A,0x55,0xFE,0x18,0x43,0xB1,0x4C,0x37,0x6F,0xA7,0x2D,0x72,0x22,0x8A,0xF3,0x9E,0xA6,0xFA,0x94,0x0A,0xDD,0x7C,0x9B,0xDB,0xAD,0xB1,0xD7,0x40,0xF3,0x78,0x3D,0xE7,0x7E,0xE6,0x07,0x81,0x22,0x94,0xBB,0x88,0x6C,0x00,0x50,0xC0,0xB6,0xD7,0x1E,0x10,0x40,0x9B,0xEB,0x0C,0x28,0x56,0xE9,0xFF,0x01};
const uint8_t spLEFT[] PROGMEM = {0x69,0x1D,0xC0,0xDA,0xCC,0xD3,0xA6,0xB5,0x81,0x68,0xD1,0xF4,0xDA,0xC7,0xD3,0x57,0x6F,0x11,0xDC,0x4B,0x6E,0x73,0x9A,0xE6,0x5D,0x5B,0x72,0xF5,0xED,0xF7,0xD2,0xCE,0x92,0x2C,0x5C,0xEA,0x0D,0x03,0x8A,0x0E,0x25,0xC0,0x74,0xE3,0x12,0xD0,0x80,0x04,0x10,0x90,0x89,0x2B,0x08,0x60,0x8B,0x71,0x0B,0x10,0xA0,0xB5,0xF3,0xFF,0x07};
#include <Adafruit_CircuitPlayground.h>


// Enumeration representing possible moves
enum Move {
  NONE = 0,  // No move made
  LEFT = 1,  // Left move made
  RIGHT = 2  // Right move made
};

// volatile because it's used in an ISR
volatile Move lastButtonPressed = NONE; //no button pressed starting the game 

// Time delays and tone frequency
int delay = 1500;  // Delay between each game round
int Reaction = 150; // Reaction time allowed 
int toneFrequency = 300; // Start tone frequency

void setup() {
  CircuitPlayground.begin();

  // create interrupts for each move 
  attachInterrupt(digitalPinToInterrupt(4), leftButtonISR, FALLING);
  attachInterrupt(digitalPinToInterrupt(5), rightButtonISR, FALLING);
}

void loop() {
  if (!CircuitPlayground.slideSwitch()) {
    delay(100);
    return; //if slideswitch is NOT on, then the gamne will end and vice versa 
  }
  // random move will be played 
  Move dir = (Move)random(1, 3);


  // Announce the randomly selected move
  switch (dir) {
    case LEFT:
      CircuitPlayground.speaker.say(spLEFT); // announce left
      break;
    case RIGHT:
      CircuitPlayground.speaker.say(spRIGHT); // announce Right
      break;
  }

  delay(Reaction); // Give the player time to respond

  // Check if the button pressed matches the announced direction
  switch (dir) {
    case LEFT:
      if (lastButtonPressed == LEFT) { // If correct button pressed
        correctAction(); // play good move procedure 
      } else { // If incorrect or no button pressed
        incorrectAction(); // Bad move procedure 
      }
      break;
    case RIGHT:
      if (lastButtonPressed == RIGHT) { 
        correctAction(); 
      } else { 
        incorrectAction(); 
      }
      break;
  }

  lastButtonPressed = NONE; //Reset button press, as it will read good if not reset 

  // Time in between move announcements 
  delay(delay);
}


void leftButtonISR() {
  lastButtonPressed = LEFT; // Check left was pressed
}

// ISR for the right button
void rightButtonISR() {
  lastButtonPressed = RIGHT; // check right was pressed
}

// Procedure to run when the player presses the correct button
void correctAction() {
  CircuitPlayground.clearPixels(); // Clear LEDS
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, 0, 255, 0); // Set all LEDS to green
  }
  CircuitPlayground.playTone(toneFrequency, 100, false); // Play the current tone
  toneFrequency += 100; // Increment tone
}

// Run when the player presses the wrong button or doesn't press in time
void incorrectAction() {
  CircuitPlayground.clearPixels(); // Clear any existing LED colors
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, 255, 0, 0); // Set all LED to red
  }
  CircuitPlayground.playTone(220, 100, false); // Play a low tone
  toneFrequency = 300; // Reset the tone
}
